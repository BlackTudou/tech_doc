=======================
链接脚本的简单示例
=======================

许多链接脚本都相当简单。最简单的链接脚本只有一个命令:' SECTIONS '。可以使用' SECTIONS '命令来描述输出文件的内存布局。
SECTIONS命令是一个功能强大的命令。

这里我们将描述它的一个简单用法。
让我们假设程序只由代码、初始化数据和未初始化数据组成。
它们将分别在' .text '、' .data '和' .bss '区域中。
让我们进一步假设这些节是在输入文件中出现的唯一的节，没有其他节。对于这个例子，假设代码应该在地址' 0x02000000 '加载，并且数据应该从地址' 0x28000000 '开始。下面的链接脚本将实现该功能。

.. code-block:: text
    :linenos:

    SECTIONS
    {
        . = 0x02000000;
        .text : { *(.text) }
        . = 0x28000000;
        .data : { *(.data) }
        .bss : { *(.bss) }
    }

你把' SECTIONS '命令写成关键字' SECTIONS '，后面跟着一系列符号赋值和用花括号括起来的输出节描述。

上面例子中的第一行设置了特殊符号 '.' ，也就是位置计数器。如果没有以其他方式指定输出节的地址(其他方式将在后面描述)，地址将被设置为位置计数器的当前值。然后，位置计数器按输出节的大小递增。

第二行定义了一个输出节'. text '。冒号是语法要求必需的，现在可以先不管它。在输出节名称后面的花括号中，列出了输入节的名称，这些名称应该放在这个输出节中。

' * '是一个通配符，可以匹配任何文件名。表达式*(.text)表示所有输入文件中的' .text '输入节。（译注：即输出节.text由所有输入文件中的.text节组成）

因为当定义输出节'. text '时，位置计数器是' 0x02000000 '，链接器将输出文件中'. text '节的地址设置为' 0x02000000 '。其余的行定义了输出文件中的' .data '和' .bss '节。'. data '输出节将位于地址' 0x28000000 '。当定义了' .bss '输出节时，位置计数器的值将是' 0x28000000 '加上' .data '输出节的大小。其效果是，' .bss '输出节在内存中将紧跟着' .data '输出节。

就是这样 ! 这是一个简单而完整的链接脚本。